Category,Type,Name,File,Line,Column,Context
dataSinks,write_operation,create,d:\CodeAnalysis\TravelCrafter\app.js,50,14,"// This is to store the session information on Atlas DB. Previsously it was on localhost
const store = MongoStore.create({
    mongoUrl:dbUrl,
    crypto:{
        secret: process.env.SESSION_SECRET,
    },
    touchAfter: 24 * 3600 , // This means that the session will be updated in the database only if it has been modified in the last 24 hours.
});"
dataSinks,write_operation,save,d:\CodeAnalysis\TravelCrafter\controllers\listings.js,99,10,"await newListing.save();
    req.flash(""success"",""New Listing created!"");"
dataSinks,write_operation,findByIdAndUpdate,d:\CodeAnalysis\TravelCrafter\controllers\listings.js,123,24,"let {id}= req.params;
    let listing = await Listing.findByIdAndUpdate(id, {...req.body.listing});"
dataSinks,write_operation,save,d:\CodeAnalysis\TravelCrafter\controllers\listings.js,129,14,"listing.image = {url, filename};
        await listing.save();
    }"
dataSinks,write_operation,findByIdAndDelete,d:\CodeAnalysis\TravelCrafter\controllers\listings.js,140,31,"let {id}= req.params;
    let deletedListing = await Listing.findByIdAndDelete(id);
    // console.log(deletedListing);"
dataSinks,write_operation,save,d:\CodeAnalysis\TravelCrafter\controllers\reviews.js,11,10,"await newReview.save();
    await listing.save();"
dataSinks,write_operation,save,d:\CodeAnalysis\TravelCrafter\controllers\reviews.js,12,10,"await newReview.save();
    await listing.save();
    req.flash(""success"",""New Review created!"");"
dataSinks,write_operation,findByIdAndUpdate,d:\CodeAnalysis\TravelCrafter\controllers\reviews.js,20,10,"let {id, reviewId} = req.params;
    await Listing.findByIdAndUpdate(id,{$pull:{reviews:reviewId}})
    await Review.findByIdAndDelete(reviewId);"
dataSinks,write_operation,findByIdAndDelete,d:\CodeAnalysis\TravelCrafter\controllers\reviews.js,21,10,"await Listing.findByIdAndUpdate(id,{$pull:{reviews:reviewId}})
    await Review.findByIdAndDelete(reviewId);
    req.flash(""success"",""Review deleted!"");"
dataSinks,write_operation,deleteMany,d:\CodeAnalysis\TravelCrafter\init\index.js,36,8,"const initDB = async () => {
  await Listing.deleteMany({});
  initData.data = initData.data.map((obj)=>({...obj, owner: process.env.DB_ADMIN_ID}));"
dataSinks,write_operation,deleteMany,d:\CodeAnalysis\TravelCrafter\models\listing.js,52,14,"if(listing){
        await Review.deleteMany({_id: {$in: listing.reviews}});
    }"
dataSinks,write_operation,post,d:\CodeAnalysis\TravelCrafter\models\listing.js,50,0,"// The below code is for deleting reviews when a listing is deleted
listingSchema.post(""findOneAndDelete"",async(listing)=>{
    if(listing){
        await Review.deleteMany({_id: {$in: listing.reviews}});
    }
})"
dataSinks,write_operation,post,d:\CodeAnalysis\TravelCrafter\routes\listing.js,15,0,"// listings routes
router
    .route(""/"")
    .get(wrapAsync(ListingController.index)) //Index route
    .post(isLoggedIn, upload.single('listing[image]') , validateListing , wrapAsync(ListingController.createListing)) //Create route"
dataSinks,write_operation,post,d:\CodeAnalysis\TravelCrafter\routes\listing.js,26,0,"// Category Route
router.post(""/category"", wrapAsync(ListingController.showCategory));"
dataSinks,write_operation,put,d:\CodeAnalysis\TravelCrafter\routes\listing.js,33,0,"// listings/:id routes
router
    .route(""/:id"")
    .get(wrapAsync(ListingController.showListing))  //Show route
    .put(isLoggedIn, isOwner, upload.single('listing[image]'), validateListing , wrapAsync(ListingController.updateListing)) //Update route
    .delete(isLoggedIn, isOwner, wrapAsync(ListingController.deleteListing)) // Delete route"
dataSinks,write_operation,delete,d:\CodeAnalysis\TravelCrafter\routes\listing.js,33,0,"// listings/:id routes
router
    .route(""/:id"")
    .get(wrapAsync(ListingController.showListing))  //Show route
    .put(isLoggedIn, isOwner, upload.single('listing[image]'), validateListing , wrapAsync(ListingController.updateListing)) //Update route
    .delete(isLoggedIn, isOwner, wrapAsync(ListingController.deleteListing)) // Delete route"
dataSinks,write_operation,post,d:\CodeAnalysis\TravelCrafter\routes\review.js,10,0,"//Post Reviews 
router.post(""/"", isLoggedIn, validateReview, wrapAsync(reviewController.createReview));"
dataSinks,write_operation,delete,d:\CodeAnalysis\TravelCrafter\routes\review.js,14,0,"// Delete Review Route
router.delete(""/:reviewId"", 
        isLoggedIn,
        isReviewAuthor,
        wrapAsync(reviewController.deleteReview));"
dataSinks,write_operation,post,d:\CodeAnalysis\TravelCrafter\routes\user.js,10,0,"router
    .route(""/signup"")
    .get(userController.renderSignupForm)
    .post(wrapAsync(userController.signup))"
dataSinks,write_operation,post,d:\CodeAnalysis\TravelCrafter\routes\user.js,16,0,"router
    .route(""/login"")
    .get(userController.renderLoginForm)
    .post( saveRedirectUrl , passport.authenticate(""local"", {failureRedirect: '/login', failureFlash :true}), userController.login)"
dataSources,read_operation,get,d:\CodeAnalysis\TravelCrafter\app.js,103,0,"app.get(""/"",(req,res)=>{
    res.redirect(""/listings"");
})"
dataSources,read_operation,find,d:\CodeAnalysis\TravelCrafter\controllers\listings.js,9,30,"module.exports.index = (async(req,res)=>{
    const allListings = await Listing.find({});
    // console.log(allListings);"
dataSources,read_operation,findById,d:\CodeAnalysis\TravelCrafter\controllers\listings.js,21,26,"let {id}= req.params;
    const listing = await Listing.findById(id)
    .populate("
dataSources,read_operation,find,d:\CodeAnalysis\TravelCrafter\controllers\listings.js,43,30,"const allListings = await Listing.find({category:selectedCategory})
    // console.log(allListings);"
dataSources,read_operation,find,d:\CodeAnalysis\TravelCrafter\controllers\listings.js,61,30,"// Find listings matching the regex pattern for the country
    const allListings = await Listing.find({ country: { $regex: regexPattern } });
    // console.log(allListings);"
dataSources,read_operation,findById,d:\CodeAnalysis\TravelCrafter\controllers\listings.js,108,26,"let {id}= req.params;
    const listing = await Listing.findById(id);
    // console.log(listing.image);"
dataSources,read_operation,findByIdAndUpdate,d:\CodeAnalysis\TravelCrafter\controllers\listings.js,123,24,"let {id}= req.params;
    let listing = await Listing.findByIdAndUpdate(id, {...req.body.listing});"
dataSources,read_operation,findByIdAndDelete,d:\CodeAnalysis\TravelCrafter\controllers\listings.js,140,31,"let {id}= req.params;
    let deletedListing = await Listing.findByIdAndDelete(id);
    // console.log(deletedListing);"
dataSources,read_operation,findById,d:\CodeAnalysis\TravelCrafter\controllers\reviews.js,6,24,"module.exports.createReview = (async (req,res)=>{
    let listing = await Listing.findById(req.params.id);
    let newReview = new Review(req.body.review);"
dataSources,read_operation,findByIdAndUpdate,d:\CodeAnalysis\TravelCrafter\controllers\reviews.js,20,10,"let {id, reviewId} = req.params;
    await Listing.findByIdAndUpdate(id,{$pull:{reviews:reviewId}})
    await Review.findByIdAndDelete(reviewId);"
dataSources,read_operation,findByIdAndDelete,d:\CodeAnalysis\TravelCrafter\controllers\reviews.js,21,10,"await Listing.findByIdAndUpdate(id,{$pull:{reviews:reviewId}})
    await Review.findByIdAndDelete(reviewId);
    req.flash(""success"",""Review deleted!"");"
dataSources,read_operation,findById,d:\CodeAnalysis\TravelCrafter\middleware.js,26,24,"let {id}= req.params;
    let listing = await Listing.findById(id);
    if(!listing.owner._id.equals(res.locals.currUser._id)){"
dataSources,read_operation,findById,d:\CodeAnalysis\TravelCrafter\middleware.js,62,23,"let review = await Review.findById(reviewId);
    if(!review.author._id.equals(res.locals.currUser._id)){"
dataSources,read_operation,getElementById,d:\CodeAnalysis\TravelCrafter\public\js\index.js,3,16,"let taxSwitch = document.getElementById(""flexSwitchCheckDefault"");
taxSwitch.addEventListener(""click"", ()=>{"
dataSources,read_operation,getElementsByClassName,d:\CodeAnalysis\TravelCrafter\public\js\index.js,5,18,"taxSwitch.addEventListener(""click"", ()=>{
    let taxInfo = document.getElementsByClassName(""tax-info"");
    for(info of taxInfo)"
dataSources,read_operation,getElementById,d:\CodeAnalysis\TravelCrafter\public\js\index.js,18,0,"// Set the selected category value to the hidden input field
document.getElementById('selectedCategory').value = category;"
dataSources,read_operation,getElementById,d:\CodeAnalysis\TravelCrafter\public\js\index.js,21,0,"// Submit the form
document.getElementById('filterForm').submit();
}"
dataSources,read_operation,get,d:\CodeAnalysis\TravelCrafter\routes\listing.js,15,0,"// listings routes
router
    .route(""/"")
    .get(wrapAsync(ListingController.index)) //Index route
    .post(isLoggedIn, upload.single('listing[image]') , validateListing , wrapAsync(ListingController.createListing)) //Create route"
dataSources,read_operation,get,d:\CodeAnalysis\TravelCrafter\routes\listing.js,23,0,"//New Route
router.get(""/new"",isLoggedIn,ListingController.renderNewForm);"
dataSources,read_operation,get,d:\CodeAnalysis\TravelCrafter\routes\listing.js,29,0,"// Search  Route
router.get(""/search"", wrapAsync(ListingController.showSearch));"
dataSources,read_operation,get,d:\CodeAnalysis\TravelCrafter\routes\listing.js,33,0,"// listings/:id routes
router
    .route(""/:id"")
    .get(wrapAsync(ListingController.showListing))  //Show route
    .put(isLoggedIn, isOwner, upload.single('listing[image]'), validateListing , wrapAsync(ListingController.updateListing)) //Update route"
dataSources,read_operation,get,d:\CodeAnalysis\TravelCrafter\routes\listing.js,41,0,"//Edit Route
router.get(""/:id/edit"" , isLoggedIn , isOwner, wrapAsync(ListingController.renderEditForm));"
dataSources,read_operation,get,d:\CodeAnalysis\TravelCrafter\routes\user.js,10,0,"router
    .route(""/signup"")
    .get(userController.renderSignupForm)
    .post(wrapAsync(userController.signup))"
dataSources,read_operation,get,d:\CodeAnalysis\TravelCrafter\routes\user.js,16,0,"router
    .route(""/login"")
    .get(userController.renderLoginForm)
    .post( saveRedirectUrl , passport.authenticate(""local"", {failureRedirect: '/login', failureFlash :true}), userController.login)"
dataSources,read_operation,get,d:\CodeAnalysis\TravelCrafter\routes\user.js,22,0,"router.get(""/logout"",userController.logout);"
authFlows,auth_mechanism,session,d:\CodeAnalysis\TravelCrafter\app.js,81,8,"app.use(session(sessionOptions));
app.use(flash());"
authFlows,auth_mechanism,sessionOptions,d:\CodeAnalysis\TravelCrafter\app.js,81,16,"app.use(session(sessionOptions));
app.use(flash());"
authFlows,auth_mechanism,passport,d:\CodeAnalysis\TravelCrafter\app.js,84,8,"app.use(passport.initialize());
app.use(passport.session());"
authFlows,auth_mechanism,passport,d:\CodeAnalysis\TravelCrafter\app.js,85,8,"app.use(passport.initialize());
app.use(passport.session());
passport.use(new LocalStrategy(User.authenticate()));"
authFlows,auth_mechanism,passport,d:\CodeAnalysis\TravelCrafter\app.js,86,0,"app.use(passport.session());
passport.use(new LocalStrategy(User.authenticate()));"
authFlows,auth_mechanism,passport,d:\CodeAnalysis\TravelCrafter\app.js,89,0,"// use static serialize and deserialize of model for passport session support
passport.serializeUser(User.serializeUser());
passport.deserializeUser(User.deserializeUser());"
authFlows,auth_mechanism,passport,d:\CodeAnalysis\TravelCrafter\app.js,90,0,"passport.serializeUser(User.serializeUser());
passport.deserializeUser(User.deserializeUser());"
authFlows,auth_mechanism,mapToken,d:\CodeAnalysis\TravelCrafter\controllers\listings.js,6,52,const geocodingClient = mbxGeocoding({ accessToken: mapToken });
authFlows,auth_mechanism,passportLocalMongoose,d:\CodeAnalysis\TravelCrafter\models\user.js,14,18,userSchema.plugin(passportLocalMongoose);
authFlows,auth_mechanism,mapToken,d:\CodeAnalysis\TravelCrafter\public\js\map.js,2,23,mapboxgl.accessToken = mapToken;
authFlows,auth_mechanism,isReviewAuthor,d:\CodeAnalysis\TravelCrafter\routes\review.js,16,8,"isLoggedIn,
        isReviewAuthor,
        wrapAsync(reviewController.deleteReview));"
authFlows,auth_mechanism,passport,d:\CodeAnalysis\TravelCrafter\routes\user.js,19,29,".get(userController.renderLoginForm)
    .post( saveRedirectUrl , passport.authenticate(""local"", {failureRedirect: '/login', failureFlash :true}), userController.login)"
authFlows,auth_mechanism,mapToken,d:\CodeAnalysis\TravelCrafter\test.js,7,52,const geocodingClient = mbxGeocoding({ accessToken: mapToken });
dataModels,class,ExpressError,d:\CodeAnalysis\TravelCrafter\utils\ExpressError.js,1,0,"class ExpressError extends Error {
  constructor(statusCode, message) {
    super();
    this.statusCode = statusCode;
    this.message = message;
  }
}"