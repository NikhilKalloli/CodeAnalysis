Below is a consolidated list of unique data sinks used throughout this codebase. “Data sink” means any place or service where data is ultimately written out or sent (whether that is to a database, file storage, external API, logs, message queues, etc.) so that it is stored, persisted, or otherwise processed outside the immediate application memory.

1. Relational Databases (PostgreSQL via TypeORM)
Description: By far the most common sink in the project. The application uses TypeORM to do a wide variety of inserts, updates, deletes, migrations, and schema operations in PostgreSQL.
Examples:
Writing seeds (e.g. insert().into()…execute() calls)
CRUD operations on entities (e.g. repository.save(), delete(), update(), softDelete())
Migrations (creating tables/columns, altering/dropping columns, indexes, foreign keys, etc.)
Storing application tokens, user/workspace associations, feature flags, SSO configs, and more
2. Sentry (Error Monitoring)
Description: Sentry is explicitly set up to capture exceptions, performance traces, and profiling data.
Examples:
Sentry.init() with SENTRY_DSN
Sentry.captureException() in the Sentry driver
3. HTTP Responses to Clients
Description: Returning an HTTP response (with JSON payloads, errors, or file streams) back to the caller is considered a data sink because it pushes data out of the server to the end-user/client.
Examples:
Sending REST/GraphQL responses in controllers, resolvers, or exception filters
Piping file downloads to res
4. File System
Description: The code frequently writes data to the local filesystem, either for storing uploaded files, logs, or compiled artifacts.
Examples:
Writing static files (e.g. fs.writeFileSync in generate-front-config.ts)
Local file storage driver (LocalDriver) that uses fs.writeFile, fs.cp, fs.rename
Logging to JSON files (via CommandLogger.writeLog())
Creating temporary build directories/ZIP archives for serverless code
5. Logging (Console or Other Logger Drivers)
Description: The application writes logs (e.g. console.log, logger.log()) which can go to stdout or be captured by external log aggregators.
Examples:
Console-based logging for debugging or error messages
Potential log-file outputs in certain drivers (e.g. LoggerDriver, CommandLogger)
6. Message Queues (BullMQ / PgBoss)
Description: The system enqueues jobs to Redis-backed queues (BullMQ) or PostgreSQL-backed queues (PgBoss). The queue storage itself is a data sink.
Examples:
messageQueueService.add() or addCron() calls that place job data into Redis (BullMQ) or PostgreSQL (PgBoss)
Cron-style enqueues, job processors (e.g. webhooks, contact creation, billing tasks)
7. External Analytics & Telemetry
Description: The code sends analytics and telemetry data to external services such as Tinybird and a “twenty-telemetry” endpoint.
Examples:
analyticsService.create() to post analytics events to Tinybird (/v0/events endpoint)
telemetryService.create() to send usage events to https://twenty-telemetry.com/api/v2/selfHostingEvent
8. Email Delivery (SMTP or Logging Driver)
Description: Outgoing emails are data sinks because they are transmitted via SMTP or just logged in dev/test mode.
Examples:
emailService.send() using nodemailer’s SMTP driver (transport.sendMail())
A “logger” email driver that prints email contents to logs rather than sending
9. External OAuth / API Calls (Google, Microsoft, etc.)
Description: The system makes calls to external OAuth endpoints, sending refresh tokens or access tokens to providers like Google or Microsoft. Any POST/PUT/DELETE to an external API is a data sink.
Examples:
Microsoft token refresh (microsoftAPIsService.refreshMicrosoftRefreshToken())
Google token exchange (googleAPIsService.refreshGoogleRefreshToken())
Sending emails via Microsoft Graph or Gmail APIs
10. Cloud Storage (AWS S3)
Description: In addition to local file storage, the system also supports uploading files to S3. Writing to an S3 bucket is an external data sink.
Examples:
S3Driver code uses PutObjectCommand, DeleteObjectCommand to store/remove objects in S3
11. AWS Lambda (Serverless Driver)
Description: The code can deploy and invoke serverless functions on AWS Lambda, uploading ZIPs and sending invocation requests. This is effectively writing code/payloads to Lambda.
Examples:
lambda.driver.ts calls like CreateFunctionCommand, PublishLayerVersionCommand, lambda.invoke().
12. Cloudflare (Custom Domains)
Description: For custom domain management, the application calls Cloudflare’s APIs to create, update, or delete hostnames and SSL settings, thus pushing data to Cloudflare.
Examples:
custom-domain.service.ts with cloudflareApiClient.customHostnames.create(...), delete(...)
13. Stripe (Billing)
Description: All billing operations (subscriptions, prices, products, entitlements, usage) involve writing data to Stripe’s REST API.
Examples:
stripe.checkout.sessions.create() for subscriptions
stripe.subscriptions.cancel(), stripe.customers.update(), stripe.subscriptionItems.update()
14. Redis (Cache and Session Store)
Description: Redis is used both for caching (e.g. cacheStorageService.set(...)) and session management (via connect-redis). Setting or deleting cache entries is a data sink.
Examples:
cacheStorageService.set(), del(), flush(), setAdd()
Session store usage in session-storage.module-factory.ts
15. Outbound Webhook Targets
Description: When the application fires off webhooks to third-party URLs, it POSTs JSON payloads to external endpoints.
Examples:
call-webhook.job.ts that sends data to targetUrl via an HTTP POST
Additional Notes
In a large system like this, any external call that sends or persists data (including logs, queue jobs, HTTP responses, environment-based logs, etc.) counts as a data sink.
Often, you will see repeated patterns (e.g. “database writes”) across many modules, but it is always the same fundamental sink (e.g. the PostgreSQL database). The code may just organize those writes in many specialized services.